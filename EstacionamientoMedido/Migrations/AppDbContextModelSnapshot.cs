// <auto-generated />
using System;
using EstacionamientoMedido.Modelos;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EstacionamientoMedido.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Estacionamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Entrada")
                        .HasColumnType("TEXT");

                    b.Property<int>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlazaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlazaOcupada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrecioHora")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Salida")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEstacionamiento")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehiculoEstacionadoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlazaId");

                    b.HasIndex("VehiculoEstacionadoId");

                    b.ToTable("Estacionamientos");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.PlazaEstacionamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoPlaza")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlazaEstacionamientos");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Registro", b =>
                {
                    b.Property<int>("VehiculoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstacionamientoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VehiculoId", "EstacionamientoId");

                    b.HasIndex("EstacionamientoId");

                    b.ToTable("Registros");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Estacionamiento", b =>
                {
                    b.HasOne("EstacionamientoMedido.Modelos.PlazaEstacionamiento", "Plaza")
                        .WithMany()
                        .HasForeignKey("PlazaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstacionamientoMedido.Modelos.Vehiculo", "VehiculoEstacionado")
                        .WithMany()
                        .HasForeignKey("VehiculoEstacionadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plaza");

                    b.Navigation("VehiculoEstacionado");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Registro", b =>
                {
                    b.HasOne("EstacionamientoMedido.Modelos.Estacionamiento", "Estacionamiento")
                        .WithMany("VehiculosEstacionados")
                        .HasForeignKey("EstacionamientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EstacionamientoMedido.Modelos.Vehiculo", "Vehiculo")
                        .WithMany("Estacionamientos")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estacionamiento");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Vehiculo", b =>
                {
                    b.HasOne("EstacionamientoMedido.Modelos.Cliente", "Cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Cliente", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Estacionamiento", b =>
                {
                    b.Navigation("VehiculosEstacionados");
                });

            modelBuilder.Entity("EstacionamientoMedido.Modelos.Vehiculo", b =>
                {
                    b.Navigation("Estacionamientos");
                });
#pragma warning restore 612, 618
        }
    }
}
